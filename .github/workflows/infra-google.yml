# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build Infra Google

on:
  workflow_dispatch:

env:
  PROJECT_ID: ${{ vars.GKE_PROJECT }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }}
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}
  GKE_ZONE: ${{ vars.GKE_ZONE }}
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: samples # TODO: update to Artifact Registry docker repository
  IMAGE: static-site

jobs:
  setup-gke:
    name: Setup GKE
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
     
    - name: Get GKE Project
      run: git clone https://github.com/devair/gke-autopilot.git
      
    - name: Terraform install
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Terraform configure
      run: terraform -chdir=gke-autopilot init -reconfigure

    - name: Terraform apply
      run: terraform -chdir=gke-autopilot apply -var="project_id=${{ env.PROJECT_ID }}" -var="region=${{ env.GAR_LOCATION }}" -var="postgres_database=${{ secrets.DBNAME }}" -var="postgres_root_password=${{ secrets.DBROOTPASSWORD }}" -var="postgres_username=${{ secrets.DBUSER }}" -var="postgres_password=${{ secrets.DBPASSWORD }}"  -no-color -input=false -auto-approve

    - name: Database Ip
      run: echo "$(terraform -chdir=gke-autopilot output -raw postgres_ip_address)"
      id: DB_IP

    - name: GKE Install
      uses: "google-github-actions/setup-gcloud@v2"
      with:
        install_components: "gke-gcloud-auth-plugin"

    - name: Authenticate to GKE cluster
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GAR_LOCATION }}
    
    - run: kubectl delete secret postgres-private-ip --ignore-not-found
    - run: kubectl create secret generic postgres-private-ip --from-literal=db_host=${{ steps.DB_IP.outputs.stdout }}
    
    - run: kubectl delete secret dbusername --ignore-not-found
    - run: kubectl create secret generic dbusername --from-literal=username=${{secrets.DBUSER}}
    
    - run: kubectl delete secret dbpassword --ignore-not-found
    - run: kubectl create secret generic dbpassword --from-literal=password=${{secrets.DBPASSWORD}}
        
    - run: kubectl delete secret dbname --ignore-not-found
    - run: kubectl create secret generic dbname --from-literal=database=${{secrets.DBNAME}}

    - run: kubectl delete secret dbport --ignore-not-found
    - run: kubectl create secret generic dbport --from-literal=port=${{secrets.DBPORT}}
    
    - name: Kubernetes Project
      run: git clone https://github.com/devair/app-kubernetes.git
      
    - name: Kubernetes Deploy
      run: kubectl apply -f app-kubernetes/.

    - name: Loadbalancer
      run: kubectl get service/pedidos-svc -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      id: loadBalancerIp
    
    - run: echo ${{ steps.loadBalancerIp.outputs.stdout }}

